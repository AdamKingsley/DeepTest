import { Injectable } from '@angular/core';
import { HttpClient } from "@angular/common/http";
import { Observable } from "rxjs/internal/Observable";
import { of } from "rxjs/internal/observable/of";
import { Config } from "../config";
import { catchError } from "rxjs/operators";

@Injectable({
  providedIn: 'root'
})
export class PaintService {

  constructor(
    private http: HttpClient
  ) { }

  getSample(): Observable<object> {
    return of({ id: 1, path: 'assets/images/mnist/mnist_test_3.png', name: '', tags: [], thumbnailPath: 'assets/images/mnist/mnist_test_3.png' });
  }

  getData(): Observable<object> {
    return of({"activation_data":[[0.0,0.0,0.0,0.0,0.0,0.7811806797981262,0.0,0.6938958168029785,0.0,1.5290570259094238,1.5266282558441162,0.0,0.0,0.0,1.9303244352340698,0.0,0.0,0.0,0.0,0.0970892459154129,1.1954339742660522,0.5238460898399353,1.7568085193634033,2.0124502182006836,0.0,0.0,2.639039993286133,1.1674833297729492,0.2082563191652298,0.7476812601089478,1.786057472229004,0.03890295326709747,0.0,0.43690142035484314,0.0,0.0,0.715202271938324,0.9700479507446289,1.1634708642959595,0.7035386562347412,1.0321104526519775,0.057181570678949356,0.0,2.2552871704101562,1.715415358543396,1.9255279302597046,2.0207910537719727,1.2169116735458374,0.0,0.0,0.0,1.769063949584961,1.6907787322998047,0.0,0.9619953632354736,0.0,0.0,0.470587819814682,0.7216013669967651,0.0,0.0,0.6835718750953674,0.0,1.269779086112976,1.2542086839675903,0.5543283820152283,0.0,0.0,1.2031710147857666,0.1211458295583725,1.2660858631134033,0.7306526899337769,0.0,0.5979766845703125,0.6052471399307251,0.0,0.0,0.0,0.8444820046424866,1.6596643924713135,1.3108464479446411,0.0,0.0,1.4153873920440674,0.0,1.1594129800796509,0.08635816723108292,1.2143563032150269,0.26870763301849365,0.0,0.0,0.6250218152999878,0.0,0.2565859854221344,1.2207328081130981,0.0,1.3372031450271606,0.0,1.9431114196777344,0.0,0.0,0.3199276924133301,1.8842700719833374,0.7843048572540283,0.0,0.0,0.5808994174003601,1.9258815050125122,0.0,0.0,2.304429769515991,0.0,0.5351212620735168,0.0,0.0,1.0366191864013672,0.725776731967926,0.6588858962059021,1.042858362197876,1.4378963708877563,1.1219687461853027,0.4824531078338623,0.0,1.2676057815551758,0.0,0.0,1.4112592935562134,0.3608990013599396],[4.220630168914795,1.6176847219467163,6.2511305809021,4.611453533172607,3.7525556087493896,1.1180682182312012,2.214881181716919,2.703753709793091,2.528913736343384,0.0,0.0,3.917703628540039,5.37419319152832,1.7121047973632812,0.4245879650115967,1.4225785732269287,2.156273603439331,2.728968620300293,1.0040216445922852,9.138298034667969,4.299746513366699,2.786623954772949,4.23644495010376,0.0,0.03219858184456825,0.0,1.5226069688796997,0.0,0.0,0.0,0.0,5.964656829833984,3.565370559692383,1.8498507738113403,3.093482494354248,2.6605944633483887,0.0,0.0,5.2655439376831055,0.0,1.1224205493927002,0.0,0.21592029929161072,3.660227060317993,0.28917479515075684,0.0,1.8887403011322021,0.0,3.5019097328186035,6.499858856201172,1.7005021572113037,0.9176649451255798,1.1766020059585571,0.0,0.0,4.983887672424316,1.1683626174926758,0.0,0.0,2.2289271354675293,0.0,0.0,1.5906147956848145,0.0],[1.9308105461690594E-11,5.4497506903278606E-15,3.5388711405737183E-10,1.8597180542201386E-6,1.2990425876590287E-18,1.071118263529236E-10,2.2710245737127292E-21,0.9999979734420776,7.068783752783858E-11,6.142084174598494E-8]]});
  }

  submitSample(examId: number,
               caseId: number,
               imageId: number,
               composeImageStr: string): Observable<object> {
    let url: string = `${Config.baseUrl}process/paint/submit`;
    // console.log(composeImageStr);
    return this.http.post(url, {
      examId: examId,
      caseId: caseId,
      imageId: imageId,
      composeImageStr: composeImageStr
    }, {
      responseType: 'json',
      withCredentials: true
    }).pipe(
      catchError(this.handleError('submitSample', {}))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T> (operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      // this.ms.showError(error.message);

      // TODO: better job of transforming error for user consumption
      console.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      result['success'] = false;
      result['errorMessage'] = error.message;

      return of(result);
    };
  }

}
